'use strict';

//////////////////////////////////////////////////////////////////////
// Global constants.

const transcolor = 0x010101;

const A = 10;
const B = 11;
const C = 12;
const D = 13;
const E = 14;
const F = 15;
const G = 16;

const NONE = 0;
const BEVEL = 1;
const GOURAUD = 2;

//////////////////////////////////////////////////////////////////////
// Tables.

const coltables = [  // int[][]
	/*[
	transcolor,transcolor,transcolor, // trans
	0x000000, 0x000000, 0x000000,     // outline
	0xf02020, 0xff6060, 0xffa0a0,     // col2
	0x20f020, 0x60ff60, 0xa0ffa0,     // col1
	0xFFE020, 0xFFB000, 0xF0A000,     // col3
	0xFFFFFF, 0xB0B0B0, 0x808080,     // highlight
	],*/
	[
	transcolor,transcolor,transcolor, // trans
	0x000000, 0x000000, 0x000000,     // outline
	0xC0A080, 0x806040, 0x503010,     // col2
	0xFF7070, 0xD04040, 0xB02020,     // col1
	0xFFE020, 0xFFB000, 0xF0A000,     // col3
	0xFFFFFF, 0xB0B0B0, 0x808080,     // highlight
	],
	[
	transcolor,transcolor,transcolor, // trans
	0x000000, 0x000000, 0x000000,     // outline
	0x808080, 0x505050, 0x202020,     // col2
	0x9090FF, 0x6060F0, 0x4040E0,     // col1
	0x20E0FF, 0x00B0FF, 0x00A0F0,     // col3
	0xFFFFFF, 0xB0B0B0, 0x808080,     // highlight
	],
	[
	transcolor,transcolor,transcolor, // trans
	0x000000, 0x000000, 0x000000,     // outline
	0xA0C080, 0x608040, 0x305010,     // col2
	0x70FF70, 0x40D040, 0x20B020,     // col1
	0xE0FF20, 0xB0FF00, 0xA0F000,     // col3
	0xFFFFFF, 0xB0B0B0, 0x808080,     // highlight
	],
	[
	transcolor,transcolor,transcolor, // trans
	0x000000, 0x000000, 0x000000,     // outline
	0x907090, 0x604060, 0x301030,     // col2
	0xE020E0, 0xB000B0, 0xA000A0,     // col3
	0xFF9090, 0xF06060, 0xE04040,     // col1
	0xFFFFFF, 0xB0B0B0, 0x808080,     // highlight
	],
	[
	transcolor,transcolor,transcolor, // trans
	0x000000, 0x000000, 0x000000,     // outline
	0xA080C0, 0x604080, 0x301050,     // col2
	0x7070FF, 0x4040D0, 0x2020B0,     // col1
	0xE020FF, 0xB000FF, 0xA000F0,     // col3
	0xFFFFFF, 0xB0B0B0, 0x808080,     // highlight
	],
	[
	transcolor,transcolor,transcolor, // trans
	0x000000, 0x000000, 0x000000,     // outline
	0x80A0C0, 0x507090, 0x204060,     // col2
	0x20D0F0, 0x00B0D0, 0x0090B0,     // col3
	0x50FF50, 0x30F030, 0x10E010,     // col1
	0xFFFFFF, 0xB0B0B0, 0x808080,     // highlight
	],
// ];
//
// var simplecoltables = [
	[ // red/yellow
	transcolor,transcolor,transcolor, // trans
	0x000000, 0x000000, 0x000000,     // outline
	0xFF0000, 0xD00000, 0xA00000,     // col
	0xFF0000, 0xD00000, 0xA00000,     // col
	0xFFD000, 0xD0B000, 0xA08000,     // col
	0xFFFFFF, 0xB0B0B0, 0x808080,     // highlight
	],
	[ // blue
	transcolor,transcolor,transcolor, // trans
	0x000000, 0x000000, 0x000000,     // outline
	0x0000FF, 0x0000D0, 0x0000A0,     // col
	0x0000FF, 0x0000D0, 0x0000A0,     // col
	0x9090FF, 0x6868D0, 0x4040A0,     // col
	0xFFFFFF, 0xB0B0B0, 0x808080,     // highlight
	],
];

// filltable values:
// bit 0-1:
// 00 = leave blank
// 01 = randomly fill or leave blank
// 10 = always fill
// 11 = outline (always black)
// bit 2:
// 0 = disable black
// 1 = enable black
// bit 3:
// 0 = disable extra highlights
// 1 = enable extra highlights
// So:
// 0 = transparent
// 1 = transparent or any colour except black
// 2 = any colour except black
// 3 = always black
// 4 = N/A (transparent)
// 5 = transparent or any colour + black
// 6 = any colour + black
// 7 = N/A (always black)
// 8 = N/A (transparent)
// 9 = transparent or colour with highlights, no black
// A = colour with highlights, no black 1010
// B = N/A (always black)
// C = N/A (transparent)
// D = transparent or colour with highlights + black
// E = colour with highlights + black
// F = N/A (always black)

const shipfilltable = [  // int[][]
	[0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,1,2],
	[0,0,0,0,0,0,1,2],
	[0,0,0,0,0,0,1,2],
	[0,0,0,0,0,1,2,2],
	[0,0,0,0,0,1,2,A],
	[0,0,0,0,1,2,2,A],
	[0,0,0,0,2,2,A,A],
	[0,1,9,2,2,2,A,A],
	[0,9,A,2,2,2,A,A],
	[0,9,A,2,2,A,A,A],
	[0,9,A,2,2,A,A,A],
	[0,9,A,1,1,2,A,A],
	[0,9,A,1,2,2,9,9],
	[0,9,9,1,1,1,9,9],
	[0,0,0,0,0,0,0,0],
];

const ship2filltable = [  // int[][]
	[0,0,0,0,0,0,0,0],
	[0,1,1,0,0,0,0,0],
	[0,1,1,0,0,0,1,1],
	[0,1,1,0,0,0,1,1],
	[0,1,1,0,0,0,1,1],
	[0,2,1,0,0,1,1,1],
	[0,A,9,0,1,1,2,A],
	[0,A,9,1,2,2,A,A],
	[0,9,A,2,2,2,A,A],
	[0,9,A,2,2,2,A,A],
	[0,9,A,2,2,A,A,A],
	[0,1,1,2,2,A,A,A],
	[0,0,1,1,1,2,A,A],
	[0,0,0,1,2,2,2,2],
	[0,0,0,0,1,2,1,1],
	[0,0,0,0,0,0,0,0],
];

const butterflyfilltable = [  // int[][]
	[0,0,0,0,0,0,0,0],
	[0,0,1,0,0,9,9,1],
	[0,1,1,1,0,0,9,A],
	[0,1,A,9,1,0,9,A],
	[0,1,9,A,1,1,1,2],
	[0,0,1,2,2,2,2,2],
	[0,0,1,1,2,2,2,2],
	[0,0,0,1,1,2,2,2],
	[0,0,0,1,2,2,2,2],
	[0,0,1,2,2,1,2,2],
	[0,1,A,A,1,1,9,A],
	[0,1,A,9,1,0,9,A],
	[0,1,1,1,0,0,1,A],
	[0,1,1,0,0,0,1,2],
	[0,1,1,0,0,0,1,1],
	[0,0,0,0,0,0,0,0],
];

const butterflyfilltable18 = [  // int[][]
	[0,0,0,0,0,0,0,0,0],
	[0,0,1,1,0,0,9,9,1],
	[0,1,1,2,1,0,0,A,A],
	[0,1,A,A,9,1,0,9,A],
	[0,1,9,9,A,1,1,1,2],
	[0,1,9,9,A,1,1,1,2],
	[0,0,1,1,2,2,2,2,2],
	[0,0,1,1,1,2,2,2,2],
	[0,0,0,0,0,1,2,2,2],
	[0,0,0,1,1,2,2,2,2],
	[0,0,1,1,2,2,1,2,2],
	[0,1,A,A,A,1,1,9,A],
	[0,1,A,A,A,1,1,9,A],
	[0,1,A,A,9,1,0,9,A],
	[0,1,1,1,1,1,0,1,A],
	[0,1,1,1,1,0,0,1,2],
	[0,1,1,1,0,0,0,1,1],
	[0,0,0,0,0,0,0,0,0],
];

const butterflyfilltable20 = [  // int[][]
	[0,0,0,0,0,0,0,0,0,0],
	[0,0,1,1,1,0,0,1,9,1],
	[0,1,1,2,1,1,0,0,9,A],
	[0,1,A,A,A,A,0,0,9,A],
	[0,1,A,A,A,A,1,1,1,A],
	[0,1,1,2,2,2,2,2,2,2],
	[0,0,1,1,2,2,2,2,2,2],
	[0,0,1,1,2,2,2,2,2,2],
	[0,0,0,1,1,1,2,2,2,2],
	[0,0,0,0,0,1,1,2,2,2],
	[0,0,0,0,0,1,2,2,2,2],
	[0,0,0,1,2,2,2,1,2,2],
	[0,0,1,1,2,2,2,1,2,2],
	[0,1,A,A,A,A,1,1,9,A],
	[0,1,A,A,A,A,1,1,9,A],
	[0,1,A,A,9,9,1,0,9,A],
	[0,1,1,2,1,1,0,0,1,A],
	[0,1,1,1,1,0,0,0,1,2],
	[0,0,1,1,0,0,0,1,1,1],
	[0,0,0,0,0,0,0,0,0,0],
];

// 1 = 1x up
// 2 = 1x up right
// 3 = 1x right
// 4 = 1x down right
// 5 = 1x down
// 6 = 1x down left
// 7 = 1x left
// 8 = 1x up left
// 9 .. 16 = 2x
//
//        9
//    G   1   A
//     8  |  2
//      \ | /
// F 7---   ---3 B
//      / | \
//     6  |  4
//    E   5   C
//        D

const birdanimtable = [[  // int[][][]
	[3,3,3,3,0,0,0,0,0,0,0,0,7,7,7,7],
	[3,3,3,3,0,0,0,0,0,0,0,0,7,7,7,7],
	[3,3,3,3,0,0,0,0,0,0,0,0,7,7,7,7],
	[3,3,3,3,0,0,0,0,0,0,0,0,7,7,7,7],
	[3,3,3,3,0,0,0,0,0,0,0,0,7,7,7,7],
	[3,3,3,3,0,0,0,0,0,0,0,0,7,7,7,7],
	[3,3,3,3,0,0,0,0,0,0,0,0,7,7,7,7],
	[3,3,3,3,0,0,0,0,0,0,0,0,7,7,7,7],
	[3,3,3,3,0,0,0,0,0,0,0,0,7,7,7,7],
	[3,3,3,3,0,0,0,0,0,0,0,0,7,7,7,7],
	[3,3,3,3,0,0,0,0,0,0,0,0,7,7,7,7],
	[3,3,3,3,0,0,0,0,0,0,0,0,7,7,7,7],
	[3,3,3,3,0,0,0,0,0,0,0,0,7,7,7,7],
	[3,3,3,3,0,0,0,0,0,0,0,0,7,7,7,7],
	[3,3,3,3,0,0,0,0,0,0,0,0,7,7,7,7],
	[3,3,3,3,0,0,0,0,0,0,0,0,7,7,7,7],

],[
	[B,B,B,B,3,3,0,0,0,0,7,7,F,F,F,F],
	[B,B,B,B,3,3,0,0,0,0,7,7,F,F,F,F],
	[B,B,B,B,3,3,0,0,0,0,7,7,F,F,F,F],
	[B,B,B,B,3,3,0,0,0,0,7,7,F,F,F,F],
	[B,B,B,B,3,3,0,0,0,0,7,7,F,F,F,F],
	[B,B,B,B,3,3,0,0,0,0,7,7,F,F,F,F],
	[B,B,B,B,3,3,0,0,0,0,7,7,F,F,F,F],
	[B,B,B,B,3,3,0,0,0,0,7,7,F,F,F,F],
	[B,B,B,B,3,3,0,0,0,0,7,7,F,F,F,F],
	[B,B,B,B,3,3,0,0,0,0,7,7,F,F,F,F],
	[B,B,B,B,3,3,0,0,0,0,7,7,F,F,F,F],
	[B,B,B,B,3,3,0,0,0,0,7,7,F,F,F,F],
	[B,B,B,B,3,3,0,0,0,0,7,7,F,F,F,F],
	[B,B,B,B,3,3,0,0,0,0,7,7,F,F,F,F],
	[B,B,B,B,3,3,0,0,0,0,7,7,F,F,F,F],
	[B,B,B,B,3,3,0,0,0,0,7,7,F,F,F,F],
]];

const birdanimtable18 = [[  // int[][][]
	[3,3,3,3,3,0,0,0,0,0,0,0,0,7,7,7,7,7],
	[3,3,3,3,3,0,0,0,0,0,0,0,0,7,7,7,7,7],
	[3,3,3,3,3,0,0,0,0,0,0,0,0,7,7,7,7,7],
	[3,3,3,3,3,0,0,0,0,0,0,0,0,7,7,7,7,7],
	[3,3,3,3,3,0,0,0,0,0,0,0,0,7,7,7,7,7],
	[3,3,3,3,3,0,0,0,0,0,0,0,0,7,7,7,7,7],
	[3,3,3,3,3,0,0,0,0,0,0,0,0,7,7,7,7,7],
	[3,3,3,3,3,0,0,0,0,0,0,0,0,7,7,7,7,7],
	[3,3,3,3,3,0,0,0,0,0,0,0,0,7,7,7,7,7],
	[3,3,3,3,3,0,0,0,0,0,0,0,0,7,7,7,7,7],
	[3,3,3,3,3,0,0,0,0,0,0,0,0,7,7,7,7,7],
	[3,3,3,3,3,0,0,0,0,0,0,0,0,7,7,7,7,7],
	[3,3,3,3,3,0,0,0,0,0,0,0,0,7,7,7,7,7],
	[3,3,3,3,3,0,0,0,0,0,0,0,0,7,7,7,7,7],
	[3,3,3,3,3,0,0,0,0,0,0,0,0,7,7,7,7,7],
	[3,3,3,3,3,0,0,0,0,0,0,0,0,7,7,7,7,7],
	[3,3,3,3,3,0,0,0,0,0,0,0,0,7,7,7,7,7],
	[3,3,3,3,3,0,0,0,0,0,0,0,0,7,7,7,7,7],
],[
	[B,B,B,B,B,3,3,0,0,0,0,7,7,F,F,F,F,F],
	[B,B,B,B,B,3,3,0,0,0,0,7,7,F,F,F,F,F],
	[B,B,B,B,B,3,3,0,0,0,0,7,7,F,F,F,F,F],
	[B,B,B,B,B,3,3,0,0,0,0,7,7,F,F,F,F,F],
	[B,B,B,B,B,3,3,0,0,0,0,7,7,F,F,F,F,F],
	[B,B,B,B,B,3,3,0,0,0,0,7,7,F,F,F,F,F],
	[B,B,B,B,B,3,3,0,0,0,0,7,7,F,F,F,F,F],
	[B,B,B,B,B,3,3,0,0,0,0,7,7,F,F,F,F,F],
	[B,B,B,B,B,3,3,0,0,0,0,7,7,F,F,F,F,F],
	[B,B,B,B,B,3,3,0,0,0,0,7,7,F,F,F,F,F],
	[B,B,B,B,B,3,3,0,0,0,0,7,7,F,F,F,F,F],
	[B,B,B,B,B,3,3,0,0,0,0,7,7,F,F,F,F,F],
	[B,B,B,B,B,3,3,0,0,0,0,7,7,F,F,F,F,F],
	[B,B,B,B,B,3,3,0,0,0,0,7,7,F,F,F,F,F],
	[B,B,B,B,B,3,3,0,0,0,0,7,7,F,F,F,F,F],
	[B,B,B,B,B,3,3,0,0,0,0,7,7,F,F,F,F,F],
	[B,B,B,B,B,3,3,0,0,0,0,7,7,F,F,F,F,F],
	[B,B,B,B,B,3,3,0,0,0,0,7,7,F,F,F,F,F],
],[
	[3,3,3,3,3,0,0,0,0,0,0,0,0,7,7,7,7,7],
	[3,3,3,3,3,0,0,0,0,0,0,0,0,7,7,7,7,7],
	[3,3,3,3,3,0,0,0,0,0,0,0,0,7,7,7,7,7],
	[3,3,3,3,3,0,0,0,0,0,0,0,0,7,7,7,7,7],
	[3,3,3,3,3,0,0,0,0,0,0,0,0,7,7,7,7,7],
	[3,3,3,3,3,0,0,0,0,0,0,0,0,7,7,7,7,7],
	[3,3,3,3,3,0,0,0,0,0,0,0,0,7,7,7,7,7],
	[3,3,3,3,3,0,0,0,0,0,0,0,0,7,7,7,7,7],
	[3,3,3,3,3,0,0,0,0,0,0,0,0,7,7,7,7,7],
	[3,3,3,3,3,0,0,0,0,0,0,0,0,7,7,7,7,7],
	[3,3,3,3,3,0,0,0,0,0,0,0,0,7,7,7,7,7],
	[3,3,3,3,3,0,0,0,0,0,0,0,0,7,7,7,7,7],
	[3,3,3,3,3,0,0,0,0,0,0,0,0,7,7,7,7,7],
	[3,3,3,3,3,0,0,0,0,0,0,0,0,7,7,7,7,7],
	[3,3,3,3,3,0,0,0,0,0,0,0,0,7,7,7,7,7],
	[3,3,3,3,3,0,0,0,0,0,0,0,0,7,7,7,7,7],
	[3,3,3,3,3,0,0,0,0,0,0,0,0,7,7,7,7,7],
	[3,3,3,3,3,0,0,0,0,0,0,0,0,7,7,7,7,7],
]];

const ufofilltable = [  // int[][]
	[0,0,0,0,0,0,0,0],
	[0,0,0,0,1,1,1,1],
	[0,0,0,1,1,1,1,1],
	[0,0,1,1,1,9,9,9],
	[0,1,1,1,9,9,9,9],
	[0,1,1,9,9,9,A,A],
	[0,1,1,9,9,A,A,A],
	[0,1,1,9,9,A,A,A],
];

const ufofilltable18 = [  // int[][]
	[0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,1,1,1,1],
	[0,0,0,1,1,1,1,1,1],
	[0,0,1,1,1,1,9,9,9],
	[0,1,1,1,9,9,9,9,9],
	[0,1,1,1,9,9,9,9,9],
	[0,1,1,9,9,9,9,9,9],
	[0,1,1,9,9,9,9,9,9],
	[0,1,1,9,9,9,9,9,9],
];

const manfilltable = [  // int[][]
	[0,0,0,0,0,0,0,0],
	[0,0,0,1,1,1,2,A],
	[0,0,0,1,1,2,A,A],
	[0,0,0,1,1,1,2,2],
	[0,0,0,0,0,1,2,2],
	[0,0,0,0,1,A,2,A],
	[0,0,0,1,A,2,2,A],
	[0,0,1,A,2,1,2,A],
	[0,1,2,2,1,1,2,A],
	[0,1,1,1,1,1,2,2],
	[0,1,1,0,0,1,A,1],
	[0,0,0,0,1,A,2,1],
	[0,0,0,1,A,2,1,1],
	[0,0,1,2,A,1,1,0],
	[0,1,1,2,2,1,0,0],
	[0,0,0,0,0,0,0,0],
];

const manfilltable18 = [  // int[][]
	[0,0,0,0,0,0,0,0,0],
	[0,0,0,0,1,1,2,2,A],
	[0,0,0,1,1,1,2,A,A],
	[0,0,0,0,1,1,1,2,2],
	[0,0,0,0,0,1,A,2,A],
	[0,0,0,0,1,A,2,2,A],
	[0,0,0,1,A,2,1,2,A],
	[0,0,2,2,2,1,1,2,A],
	[0,1,2,2,2,1,1,2,A],
	[0,1,1,1,1,1,1,2,2],
	[0,1,1,1,0,0,1,A,1],
	[0,1,1,0,0,1,A,2,1],
	[0,0,0,0,1,A,2,1,1],
	[0,0,0,1,2,A,1,1,0],
	[0,0,1,1,2,A,1,1,0],
	[0,1,1,1,2,2,1,0,0],
	[0,1,1,2,2,2,1,0,0],
	[0,0,0,0,0,0,0,0,0],
];

const mananimtable = [[  // int[][][]
	[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
	[5,5,5,5,5,0,0,0,0,0,0,0,0,0,0,0],
	[5,5,5,5,5,0,0,0,0,0,0,0,0,0,0,0],
	[5,5,5,5,5,0,0,0,0,0,0,0,0,0,0,0],
	[5,5,5,5,5,0,0,0,0,0,0,0,0,0,0,0],
	[5,5,5,5,5,5,0,0,0,0,0,0,0,0,0,0],
	[5,5,5,5,5,5,0,0,0,0,0,0,0,0,0,0],
	[5,5,5,5,5,0,0,0,0,0,0,0,0,0,0,0],
	[1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0],
	[1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0],
	[1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0],
	[1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0],
	[1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0],
],[
	[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
],[
	[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,5,5,5,5,5],
	[0,0,0,0,0,0,0,0,0,0,0,5,5,5,5,5],
	[0,0,0,0,0,0,0,0,0,0,0,5,5,5,5,5],
	[0,0,0,0,0,0,0,0,0,0,0,5,5,5,5,5],
	[0,0,0,0,0,0,0,0,0,0,5,5,5,5,5,5],
	[0,0,0,0,0,0,0,0,0,0,5,5,5,5,5,5],
	[0,0,0,0,0,0,0,0,0,0,0,5,5,5,5,5],
	[0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1],
	[0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1],
	[0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1],
	[0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1],
	[0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1],
]];

const mananimtable18 = [[  // int[][][]
	[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
	[5,5,5,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0],
	[5,5,5,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0],
	[5,5,5,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0],
	[5,5,5,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0],
	[5,5,5,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0],
	[5,5,5,5,5,5,5,0,0,0,0,0,0,0,0,0,0,0],
	[5,5,5,5,5,5,5,0,0,0,0,0,0,0,0,0,0,0],
	[5,5,5,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0],
	[1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0],
	[1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0],
	[1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0],
	[1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0],
	[1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0],
	[1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0],
],[
	[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
],[
	[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0,5,5,5,5,5,5],
	[0,0,0,0,0,0,0,0,0,0,0,0,5,5,5,5,5,5],
	[0,0,0,0,0,0,0,0,0,0,0,0,5,5,5,5,5,5],
	[0,0,0,0,0,0,0,0,0,0,0,0,5,5,5,5,5,5],
	[0,0,0,0,0,0,0,0,0,0,0,0,5,5,5,5,5,5],
	[0,0,0,0,0,0,0,0,0,0,0,5,5,5,5,5,5,5],
	[0,0,0,0,0,0,0,0,0,0,0,5,5,5,5,5,5,5],
	[0,0,0,0,0,0,0,0,0,0,0,0,5,5,5,5,5,5],
	[0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1],
	[0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1],
	[0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1],
	[0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1],
	[0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1],
	[0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1],
]];

const fishfilltable = [  // int[][]
	[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,1,1,1,0],
	[0,0,1,1,2,2,2,2,2,2,2,1,0,0,1,1,1,2,9,0],
	[0,1,1,2,2,2,2,2,2,2,2,2,1,1,1,2,2,A,A,0],
	[0,1,2,2,A,A,A,A,A,2,2,2,2,2,2,2,2,9,A,0],
	[0,1,2,A,A,A,A,A,A,A,2,2,1,1,1,1,1,9,9,0],
//	[0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,0],
//	[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
];

const tilefilltable = [  // int[][]
	[2,2,2,2,2,2,2,2],
	[2,6,6,2,2,2,2,2],
	[2,6,6,6,2,2,2,2],
	[2,2,6,6,6,2,2,2],
	[2,2,2,6,E,A,A,A],
	[2,2,2,2,A,E,A,A],
	[2,2,2,2,A,A,E,A],
	[2,2,2,2,A,A,A,A],
];

const bubblefilltable = [  // int[][]
	[0,0,0,0,0,0,0,0],
	[0,0,0,0,2,2,2,2],
	[0,0,0,A,A,1,1,1],
	[0,0,A,A,1,1,1,1],
	[0,2,A,1,1,1,1,1],
	[0,2,1,1,1,1,1,1],
	[0,2,1,1,1,1,1,1],
	[0,2,1,1,1,1,1,1],
];

const blob10filltable = [  // int[][]
	[0,0,0,0,0],
	[0,0,0,1,1],
	[0,0,1,9,A],
	[0,1,9,A,A],
	[0,1,2,2,2],
	[0,1,2,2,2],
	[0,1,9,A,A],
	[0,0,1,9,A],
	[0,0,0,1,1],
	[0,0,0,0,0],
];

const rand6filltable = [  // int[][]
	[D,D,D],
	[D,D,D],
	[D,D,D],
	[D,D,D],
	[D,D,D],
	[D,D,D],
];

const rand10filltable = [  // int[][]
	[0,0,0,0,0],
	[0,9,9,9,9],
	[0,9,9,9,9],
	[0,9,9,9,9],
	[0,9,9,9,9],
	[0,9,9,9,9],
	[0,9,9,9,9],
	[0,9,9,9,9],
	[0,9,9,9,9],
	[0,0,0,0,0],
];

const rand10afilltable = [  // int[][]
	[0,0,0,0,0,0,0,0,0,0],
	[0,9,9,9,9,9,9,9,9,0],
	[0,9,9,9,9,9,9,9,9,0],
	[0,9,9,9,9,9,9,9,9,0],
	[0,9,9,9,9,9,9,9,9,0],
	[0,9,9,9,9,9,9,9,9,0],
	[0,9,9,9,9,9,9,9,9,0],
	[0,9,9,9,9,9,9,9,9,0],
	[0,9,9,9,9,9,9,9,9,0],
	[0,0,0,0,0,0,0,0,0,0],
];

const rand8afilltable = [  // int[][]
	[0,0,0,0,0,0,0,0],
	[0,9,9,9,9,9,9,0],
	[0,9,9,9,9,9,9,0],
	[0,9,9,9,9,9,9,0],
	[0,9,9,9,9,9,9,0],
	[0,9,9,9,9,9,9,0],
	[0,9,9,9,9,9,9,0],
	[0,0,0,0,0,0,0,0],
];

const rand12filltable = [  // int[][]
	[0,0,0,0,0,0],
	[0,9,9,9,9,9],
	[0,9,9,9,9,9],
	[0,9,9,9,9,9],
	[0,9,9,9,9,9],
	[0,9,9,9,9,9],
	[0,9,9,9,9,9],
	[0,9,9,9,9,9],
	[0,9,9,9,9,9],
	[0,9,9,9,9,9],
	[0,9,9,9,9,9],
	[0,0,0,0,0,0],
];

const rand12yfilltable = [  // int[][]
	[0,0,0,0,0,0,0,0,0,0,0,0],
	[0,9,9,9,9,9,9,9,9,9,9,0],
	[0,9,9,9,9,9,9,9,9,9,9,0],
	[0,9,9,9,9,9,9,9,9,9,9,0],
	[0,9,9,9,9,9,9,9,9,9,9,0],
	[0,9,9,9,9,9,9,9,9,9,9,0],
];

const rand12dfilltable = [  // int[][]
	[0,0,0,0,0,0],
	[0,9,9,9,9,9],
	[0,9,9,9,9,9],
	[0,9,9,9,9,9],
	[0,9,9,9,9,9],
	[0,9,9,9,9,9],
];

const rand14filltable = [  // int[][]
	[0,0,0,0,0,0,0],
	[0,1,1,1,1,1,1],
	[0,1,1,1,1,1,1],
	[0,1,1,1,1,1,1],
	[0,1,1,1,1,1,1],
	[0,1,1,1,1,1,1],
	[0,1,1,1,1,1,1],
	[0,1,1,1,1,1,1],
	[0,1,1,1,1,1,1],
	[0,1,1,1,1,1,1],
	[0,1,1,1,1,1,1],
	[0,1,1,1,1,1,1],
	[0,1,1,1,1,1,1],
	[0,0,0,0,0,0,0],
];

const rand14dfilltable = [  // int[][]
	[0,0,0,0,0,0,0],
	[0,1,1,1,1,1,1],
	[0,1,1,1,1,1,1],
	[0,1,1,1,1,1,1],
	[0,1,1,1,1,1,1],
	[0,1,1,1,1,1,1],
	[0,1,1,1,1,1,1],
];

const rand16filltable = [  // int[][]
	[0,0,0,0,0,0,0,0],
	[0,1,1,1,1,1,1,1],
	[0,1,1,1,1,1,1,1],
	[0,1,1,1,1,1,1,1],
	[0,1,1,1,1,1,1,1],
	[0,1,1,1,1,1,1,1],
	[0,1,1,1,1,1,1,1],
	[0,1,1,1,1,1,1,1],
	[0,1,1,1,1,1,1,1],
	[0,1,1,1,1,1,1,1],
	[0,1,1,1,1,1,1,1],
	[0,1,1,1,1,1,1,1],
	[0,1,1,1,1,1,1,1],
	[0,1,1,1,1,1,1,1],
	[0,1,1,1,1,1,1,1],
	[0,0,0,0,0,0,0,0],
];

const tile12filltable = [  // int[][]
	[2,2,2,2,2,2],
	[2,2,2,2,2,2],
	[2,2,2,2,2,2],
	[2,2,2,2,2,2],
	[2,2,2,2,2,2],
	[2,2,2,2,2,2],
];
const tileplat12filltable = [  // int[][]
	[A,A,A,A,A,A],
	[A,A,A,A,A,A],
	[A,A,A,A,A,A],
	[A,A,A,A,A,A],
	[A,A,A,A,A,A],
	[A,A,A,A,A,A],
];

//////////////////////////////////////////////////////////////////////
// Anim tables.

// Param: int[][][]
// Returns: int[][][]
function rotateAnimTable(t) {
	var lz = t.length;  // int
	var ly = t[0].length;  // int
	var lx = t[0][0].length;  // int
	var ret = [];  // int[lz][lx][ly]

	for (var z = 0; z < lz; z++) {
		ret[z] = [];
		for (var x = 0; x < lx; x++) {
			ret[z][x] = [];
			for (var y = 0; y < ly; y++) {
				var v = t[z][y][x];  // int
				if (v >= 1 && v <= 8) {
					v += 2;
					if (v > 8) {
						v -= 8;
					}
				}
				if (v >= 9 && v <= G) {
					v += 2;
					if (v > G) {
						v -= 8;
					}
				}
				ret[z][x][y] = v;
			}
		}
	}
	return ret;
}

const rand10walkanimtable = [[  // int[][][]
	[0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0],
	[5,5,5,0,0,0,0,0,0,0],
	[5,5,5,0,0,0,0,0,0,0],
	[5,5,5,0,0,0,0,0,0,0],
	[5,5,5,0,0,0,0,0,0,0],
	[5,5,5,0,0,0,0,0,0,0],
	[1,1,1,1,1,0,0,0,0,0],
	[1,1,1,1,1,0,0,0,0,0],
	[1,1,1,1,1,0,0,0,0,0],
],[
	[0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,5,5,5],
	[0,0,0,0,0,0,0,5,5,5],
	[0,0,0,0,0,0,0,5,5,5],
	[0,0,0,0,0,0,0,5,5,5],
	[0,0,0,0,0,0,0,5,5,5],
	[0,0,0,0,0,1,1,1,1,1],
	[0,0,0,0,0,1,1,1,1,1],
	[0,0,0,0,0,1,1,1,1,1],
]];

const rand10rwalkanimtable = [[  // int[][][]
	[0,0,3,3,3,3,3,7,7,7],
	[0,0,3,3,3,3,3,7,7,7],
	[0,0,3,3,3,3,3,7,7,7],
	[0,0,0,0,0,0,0,7,7,7],
	[0,0,0,0,0,0,0,7,7,7],
	[0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0],
],[
	[0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,7,7,7],
	[0,0,0,0,0,0,0,7,7,7],
	[0,0,0,0,0,0,0,7,7,7],
	[0,0,3,3,3,3,3,7,7,7],
	[0,0,3,3,3,3,3,7,7,7],
	[0,0,3,3,3,3,3,7,7,7],
]];

const rand10flyanimtable = [[  // int[][][]
	[0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0],
],[
	[3,3,3,0,0,0,0,7,7,7],
	[3,3,3,0,0,0,0,7,7,7],
	[3,3,3,0,0,0,0,7,7,7],
	[3,3,3,0,0,0,0,7,7,7],
	[3,3,3,0,0,0,0,7,7,7],
	[3,3,3,0,0,0,0,7,7,7],
	[3,3,3,0,0,0,0,7,7,7],
	[3,3,3,0,0,0,0,7,7,7],
	[3,3,3,0,0,0,0,7,7,7],
	[3,3,3,0,0,0,0,7,7,7],
],[
	[B,B,3,3,0,0,7,7,F,F],
	[B,B,3,3,0,0,7,7,F,F],
	[B,B,3,3,0,0,7,7,F,F],
	[B,B,B,3,0,0,7,F,F,F],
	[B,B,B,3,0,0,7,F,F,F],
	[B,B,B,3,0,0,7,F,F,F],
	[B,B,B,3,0,0,7,F,F,F],
	[B,B,3,3,0,0,7,7,F,F],
	[B,B,3,3,0,0,7,7,F,F],
	[B,B,3,3,0,0,7,7,F,F],
],[
	[3,3,3,0,0,0,0,7,7,7],
	[3,3,3,0,0,0,0,7,7,7],
	[3,3,3,0,0,0,0,7,7,7],
	[3,3,3,0,0,0,0,7,7,7],
	[3,3,3,0,0,0,0,7,7,7],
	[3,3,3,0,0,0,0,7,7,7],
	[3,3,3,0,0,0,0,7,7,7],
	[3,3,3,0,0,0,0,7,7,7],
	[3,3,3,0,0,0,0,7,7,7],
	[3,3,3,0,0,0,0,7,7,7],
]];

const rand12turnanimtable = [[  // int[][][]
	[0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0],
],[
	[6,6,6,6,7,7,7,7,8,8,8,8],
	[6,6,6,6,7,7,7,7,8,8,8,8],
	[6,6,6,6,7,7,7,7,8,8,8,8],
	[6,6,6,6,6,7,7,8,8,8,8,8],
	[5,5,5,6,6,7,7,8,8,1,1,1],
	[5,5,5,5,5,7,7,1,1,1,1,1],
	[5,5,5,5,5,3,3,1,1,1,1,1],
	[5,5,5,4,4,3,3,2,2,1,1,1],
	[4,4,4,4,4,3,3,2,2,2,2,2],
	[4,4,4,4,3,3,3,3,2,2,2,2],
	[4,4,4,4,3,3,3,3,2,2,2,2],
	[4,4,4,4,3,3,3,3,2,2,2,2],
],[
	[D,D,E,E,F,F,F,F,F,F,F,F],
	[D,D,E,E,F,F,F,F,F,F,F,F],
	[D,D,E,E,F,F,F,F,G,G,G,G],
	[D,D,E,E,E,F,F,G,G,G,G,G],
	[D,D,D,E,E,F,F,G,G,9,9,9],
	[D,D,D,D,D,F,F,9,9,9,9,9],
	[D,D,D,D,D,B,B,9,9,9,9,9],
	[D,D,D,C,C,B,B,A,A,9,9,9],
	[C,C,C,C,C,B,B,A,A,A,9,9],
	[C,C,C,C,B,B,B,B,A,A,9,9],
	[B,B,B,B,B,B,B,B,A,A,9,9],
	[B,B,B,B,B,B,B,B,A,A,9,9],
],[
	[B,B,B,B,B,B,B,B,C,C,D,D],
	[B,B,B,B,B,B,B,B,C,C,D,D],
	[A,A,A,A,B,B,B,B,C,C,D,D],
	[A,A,A,A,A,B,B,C,C,C,D,D],
	[9,9,9,A,A,B,B,C,C,D,D,D],
	[9,9,9,9,9,B,B,D,D,D,D,D],
	[9,9,9,9,9,F,F,D,D,D,D,D],
	[9,9,9,G,G,F,F,E,E,D,D,D],
	[9,9,G,G,G,F,F,E,E,E,E,E],
	[9,9,G,G,F,F,F,F,E,E,E,E],
	[9,9,G,G,F,F,F,F,F,F,F,F],
	[9,9,G,G,F,F,F,F,F,F,F,F],
],[
	[2,2,2,2,3,3,3,3,4,4,4,4],
	[2,2,2,2,3,3,3,3,4,4,4,4],
	[2,2,2,2,3,3,3,3,4,4,4,4],
	[2,2,2,2,2,3,3,4,4,4,4,4],
	[1,1,1,2,2,3,3,4,4,5,5,5],
	[1,1,1,1,1,3,3,5,5,5,5,5],
	[1,1,1,1,1,7,7,5,5,5,5,5],
	[1,1,1,8,8,7,7,6,6,5,5,5],
	[8,8,8,8,8,7,7,6,6,6,6,6],
	[8,8,8,8,7,7,7,7,6,6,6,6],
	[8,8,8,8,7,7,7,7,6,6,6,6],
	[8,8,8,8,7,7,7,7,6,6,6,6],
]];

const rand12walkanimtable = [[  // int[][][]
	[5,0,0,0,0,0,0,0,0,0,0,0],
	[5,5,0,0,0,0,0,0,0,0,0,0],
	[5,5,5,0,0,0,0,0,0,0,0,0],
	[5,5,5,5,0,0,0,0,0,0,0,0],
	[5,5,5,5,0,0,0,0,0,0,0,0],
	[5,5,5,5,0,0,0,0,0,0,0,0],
	[5,5,5,5,0,0,0,0,0,0,0,0],
	[5,5,0,0,0,0,0,0,0,0,0,0],
	[1,1,1,1,1,1,0,0,0,0,0,0],
	[1,1,1,1,1,1,0,0,0,0,0,0],
	[1,1,1,1,1,1,0,0,0,0,0,0],
	[1,1,1,1,1,1,0,0,0,0,0,0],
],[
	[0,0,0,0,0,0,0,0,0,0,0,5],
	[0,0,0,0,0,0,0,0,0,0,5,5],
	[0,0,0,0,0,0,0,0,0,5,5,5],
	[0,0,0,0,0,0,0,0,5,5,5,5],
	[0,0,0,0,0,0,0,0,5,5,5,5],
	[0,0,0,0,0,0,0,0,5,5,5,5],
	[0,0,0,0,0,0,0,0,5,5,5,5],
	[0,0,0,0,0,0,0,0,0,0,5,5],
	[0,0,0,0,0,0,1,1,1,1,1,1],
	[0,0,0,0,0,0,1,1,1,1,1,1],
	[0,0,0,0,0,0,1,1,1,1,1,1],
	[0,0,0,0,0,0,1,1,1,1,1,1],
]];

const rand12rwalkanimtable = [[  // int[][][]
	[3,3,3,3,3,3,3,3,7,7,7,7],
	[0,3,3,3,3,3,3,3,7,7,7,7],
	[0,0,3,3,3,3,3,0,7,7,7,7],
	[0,0,0,3,3,3,3,0,7,7,7,7],
	[0,0,0,0,0,0,0,0,7,7,7,7],
	[0,0,0,0,0,0,0,0,7,7,7,7],
	[0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0],
],[
	[0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,7,7,7,7],
	[0,0,0,0,0,0,0,0,7,7,7,7],
	[0,0,0,3,3,3,3,0,7,7,7,7],
	[0,0,3,3,3,3,3,0,7,7,7,7],
	[0,3,3,3,3,3,3,3,7,7,7,7],
	[3,3,3,3,3,3,3,3,7,7,7,7],
]];

const rand12flyanimtable = [[  // int[][][]
	[5,5,5,0,0,0,0,0,0,5,5,5],
	[5,5,5,0,0,0,0,0,0,5,5,5],
	[5,5,0,0,0,0,0,0,0,0,5,5],
	[0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0],
	[1,1,0,0,0,0,0,0,0,0,1,1],
	[1,1,1,0,0,0,0,0,0,1,1,1],
	[1,1,1,0,0,0,0,0,0,1,1,1],
],[
	[3,3,3,3,3,3,7,7,7,7,7,7],
	[3,3,3,3,3,0,0,7,7,7,7,7],
	[3,3,3,3,0,0,0,0,7,7,7,7],
	[3,3,3,3,0,0,0,0,7,7,7,7],
	[0,3,3,3,0,0,0,0,7,7,7,0],
	[0,0,3,3,0,0,0,0,7,7,0,0],
	[0,0,3,3,0,0,0,0,7,7,0,0],
	[0,3,3,3,0,0,0,0,7,7,7,0],
	[3,3,3,3,0,0,0,0,7,7,7,7],
	[3,3,3,3,0,0,0,0,7,7,7,7],
	[3,3,3,3,3,0,0,7,7,7,7,7],
	[3,3,3,3,3,3,7,7,7,7,7,7],
],[
	[B,B,B,B,B,3,7,F,F,F,F,F],
	[B,B,B,B,3,0,0,7,F,F,F,F],
	[B,B,B,3,3,0,0,7,7,F,F,F],
	[B,B,B,3,3,0,0,7,7,F,F,F],
	[3,B,B,3,3,0,0,7,7,F,F,7],
	[3,3,B,3,3,0,0,7,7,F,7,7],
	[3,3,B,3,3,0,0,7,7,F,7,7],
	[3,B,B,3,3,0,0,7,7,F,F,7],
	[B,B,B,3,3,0,0,7,7,F,F,F],
	[B,B,B,3,3,0,0,7,7,F,F,F],
	[B,B,B,B,3,0,0,7,F,F,F,F],
	[B,B,B,B,B,3,7,F,F,F,F,F],
],[
	[3,3,3,3,3,3,7,7,7,7,7,7],
	[3,3,3,3,3,0,0,7,7,7,7,7],
	[3,3,3,3,0,0,0,0,7,7,7,7],
	[3,3,3,3,0,0,0,0,7,7,7,7],
	[0,3,3,3,0,0,0,0,7,7,7,0],
	[0,0,3,3,0,0,0,0,7,7,0,0],
	[0,0,3,3,0,0,0,0,7,7,0,0],
	[0,3,3,3,0,0,0,0,7,7,7,0],
	[3,3,3,3,0,0,0,0,7,7,7,7],
	[3,3,3,3,0,0,0,0,7,7,7,7],
	[3,3,3,3,3,0,0,7,7,7,7,7],
	[3,3,3,3,3,3,7,7,7,7,7,7],
]];

const rand12rflyanimtable = rotateAnimTable(rand12flyanimtable);  // int[][][]

const rand12crawlanimtable = [[  // int[][][]
	[0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0],
],[
	[0,0,0,7,7,7,7,7,6,6,6,6],
	[0,0,7,7,7,7,7,7,7,6,6,6],
	[0,7,7,7,7,7,7,7,7,7,6,6],
	[0,0,7,7,7,7,7,7,7,7,7,7],
	[0,0,0,0,0,0,0,0,7,7,7,7],
	[0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0],
	[3,3,3,3,0,0,0,0,0,0,0,0],
	[3,3,3,3,3,3,3,3,3,3,0,0],
	[2,2,3,3,3,3,3,3,3,3,3,0],
	[2,2,2,3,3,3,3,3,3,3,0,0],
	[2,2,2,2,3,3,3,3,3,0,0,0],
],[
	[0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0],
],[
	[4,4,4,4,3,3,3,3,3,0,0,0],
	[4,4,4,3,3,3,3,3,3,3,0,0],
	[4,4,3,3,3,3,3,3,3,3,3,0],
	[3,3,3,3,3,3,3,3,3,3,0,0],
	[3,3,3,3,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,7,7,7,7],
	[0,0,7,7,7,7,7,7,7,7,7,7],
	[0,7,7,7,7,7,7,7,7,7,8,8],
	[0,0,7,7,7,7,7,7,7,8,8,8],
	[0,0,0,7,7,7,7,7,8,8,8,8],
]];

const rand12rcrawlanimtable = rotateAnimTable(rand12crawlanimtable);  // int[][][]

//
//        9
//    G   1   A
//     8  |  2
//      \ | /
// F 7---   ---3 B
//      / | \
//     6  |  4
//    E   5   C
//        D

const rand12bubbleanimtable = [[  // int[][][]
	[3,2,2,2,1,1,1,1,8,8,8,7],
	[3,3,2,2,1,1,1,1,8,8,7,7],
	[3,3,3,2,2,1,1,8,8,7,7,7],
	[3,3,3,3,2,1,1,8,7,7,7,7],
	[3,3,3,3,0,0,0,0,7,7,7,7],
	[3,3,3,3,0,0,0,0,7,7,7,7],
	[3,3,3,3,0,0,0,0,7,7,7,7],
	[3,3,3,3,0,0,0,0,7,7,7,7],
	[3,3,3,3,4,5,5,6,7,7,7,7],
	[3,3,3,4,4,5,5,6,6,7,7,7],
	[3,3,4,4,5,5,5,5,6,6,7,7],
	[3,4,4,4,5,5,5,5,6,6,6,7],
],[
	[0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0],
],[
	[5,5,5,5,5,5,5,5,5,5,5,5],
	[6,5,5,5,5,5,5,5,5,5,5,4],
	[6,6,5,5,5,5,5,5,5,5,4,4],
	[6,6,6,5,5,5,5,5,5,4,4,4],
	[7,7,6,6,0,0,0,0,4,4,3,3],
	[7,7,7,7,0,0,0,0,3,3,3,3],
	[7,7,7,7,0,0,0,0,3,3,3,3],
	[7,7,8,8,0,0,0,0,2,2,3,3],
	[8,8,8,1,1,1,1,1,1,2,2,2],
	[8,8,1,1,1,1,1,1,1,1,2,2],
	[8,1,1,1,1,1,1,1,1,1,1,2],
	[1,1,1,1,1,1,1,1,1,1,1,1],
],[
	[0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0],
]];

const rand12nullanimtable = [[  // int[][][]
	[0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0],
]];

const rand12bendanimtable = [[  // int[][][]
	[0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0],
],[
	[6,6,6,7,7,7,7,7,F,F,F,F],
	[6,6,6,7,7,7,7,7,7,F,F,F],
	[0,6,6,6,7,7,7,7,7,7,F,F],
	[0,0,6,6,6,7,7,7,7,7,7,7],
	[0,0,0,0,0,0,0,0,7,7,7,7],
	[0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,7,7,7,7],
	[0,0,8,8,8,7,7,7,7,7,7,7],
	[0,8,8,8,7,7,7,7,7,7,F,F],
	[8,8,8,7,7,7,7,7,7,F,F,F],
	[8,8,8,7,7,7,7,7,F,F,F,F],
],[
	[0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0],
],[
	[B,B,B,B,3,3,3,3,3,4,4,4],
	[B,B,B,3,3,3,3,3,3,4,4,4],
	[B,B,3,3,3,3,3,3,4,4,4,0],
	[3,3,3,3,3,3,3,4,4,4,0,0],
	[3,3,3,3,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0],
	[3,3,3,3,0,0,0,0,0,0,0,0],
	[3,3,3,3,3,3,3,3,3,2,0,0],
	[B,B,3,3,3,3,3,3,2,2,2,0],
	[B,B,B,3,3,3,3,3,2,2,2,2],
	[B,B,B,B,3,3,3,3,3,2,2,2],
]];

const rand12pokeanimtable = [[  // int[][][]
	[0,0,0,0,0,0,0,7,7,6,6,6],
	[0,0,0,0,0,0,0,7,6,6,6,6],
	[0,0,0,0,0,0,7,6,6,6,6,6],
	[0,0,0,0,0,0,7,6,6,6,6,5],
	[0,0,0,0,0,0,7,6,6,6,5,5],
	[0,0,0,0,0,0,0,5,5,5,0,0],
	[0,0,1,1,1,0,0,0,0,0,0,0],
	[1,1,2,2,2,3,0,0,0,0,0,0],
	[1,2,2,2,2,3,0,0,0,0,0,0],
	[2,2,2,2,2,3,0,0,0,0,0,0],
	[2,2,2,2,3,0,0,0,0,0,0,0],
	[2,2,2,3,3,0,0,0,0,0,0,0],
],[
	[4,4,4,3,0,0,0,0,0,0,0,0],
	[4,4,4,4,3,0,0,0,0,0,0,0],
	[4,4,4,4,4,3,0,0,0,0,0,0],
	[5,4,4,4,4,3,0,0,0,0,0,0],
	[5,5,4,4,4,3,0,0,0,0,0,0],
	[0,0,5,5,5,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,1,1,1,0,0],
	[0,0,0,0,0,0,7,8,8,8,1,1],
	[0,0,0,0,0,0,7,8,8,8,8,1],
	[0,0,0,0,0,0,7,8,8,8,8,8],
	[0,0,0,0,0,0,0,7,8,8,8,8],
	[0,0,0,0,0,0,0,7,7,8,8,8],
]];

const rand12wiggleanimtable = [[  // int[][][]
	[3,3,0,0,0,0,0,7,7,7,7,F],
	[3,3,3,0,0,0,0,0,7,7,7,7],
	[3,3,3,3,0,0,0,0,0,7,7,7],
	[B,3,3,3,3,0,0,0,0,0,7,7],
	[B,B,3,3,3,3,0,0,0,0,0,0],
	[B,B,3,3,3,3,0,0,0,0,0,0],
	[B,3,3,3,3,0,0,0,0,0,7,7],
	[3,3,3,3,0,0,0,0,0,7,7,7],
	[3,3,3,0,0,0,0,0,7,7,7,7],
	[3,3,0,0,0,0,0,7,7,7,7,F],
	[0,0,0,0,0,0,7,7,7,7,F,F],
	[0,0,0,0,0,0,7,7,7,7,F,F],
],[
	[3,3,0,0,0,0,0,7,7,7,7,F],
	[0,0,0,0,0,0,7,7,7,7,F,F],
	[0,0,0,0,0,0,7,7,7,7,F,F],
	[3,3,0,0,0,0,0,7,7,7,7,F],
	[3,3,3,0,0,0,0,0,7,7,7,7],
	[3,3,3,3,0,0,0,0,0,7,7,7],
	[B,3,3,3,3,0,0,0,0,0,7,7],
	[B,B,3,3,3,3,0,0,0,0,0,0],
	[B,B,3,3,3,3,0,0,0,0,0,0],
	[B,3,3,3,3,0,0,0,0,0,7,7],
	[3,3,3,3,0,0,0,0,0,7,7,7],
	[3,3,3,0,0,0,0,0,7,7,7,7],
],[
	[B,3,3,3,3,0,0,0,0,0,7,7],
	[3,3,3,3,0,0,0,0,0,7,7,7],
	[3,3,3,0,0,0,0,0,7,7,7,7],
	[3,3,0,0,0,0,0,7,7,7,7,F],
	[0,0,0,0,0,0,7,7,7,7,F,F],
	[0,0,0,0,0,0,7,7,7,7,F,F],
	[3,3,0,0,0,0,0,7,7,7,7,F],
	[3,3,3,0,0,0,0,0,7,7,7,7],
	[3,3,3,3,0,0,0,0,0,7,7,7],
	[B,3,3,3,3,0,0,0,0,0,7,7],
	[B,B,3,3,3,3,0,0,0,0,0,0],
	[B,B,3,3,3,3,0,0,0,0,0,0],
],[
	[B,3,3,3,3,0,0,0,0,0,7,7],
	[B,B,3,3,3,3,0,0,0,0,0,0],
	[B,B,3,3,3,3,0,0,0,0,0,0],
	[B,3,3,3,3,0,0,0,0,0,7,7],
	[3,3,3,3,0,0,0,0,0,7,7,7],
	[3,3,3,0,0,0,0,0,7,7,7,7],
	[3,3,0,0,0,0,0,7,7,7,7,F],
	[0,0,0,0,0,0,7,7,7,7,F,F],
	[0,0,0,0,0,0,7,7,7,7,F,F],
	[3,3,0,0,0,0,0,7,7,7,7,F],
	[3,3,3,0,0,0,0,0,7,7,7,7],
	[3,3,3,3,0,0,0,0,0,7,7,7],
]];

//
//        9
//    G   1   A
//     8  |  2
//      \ | /
// F 7---   ---3 B
//      / | \
//     6  |  4
//    E   5   C
//        D

const rand12bounceanimtable = [[  // int[][][]
	[0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0],
	[3,0,0,0,0,0,0,0,0,0,0,7],
	[3,3,0,0,0,0,0,0,0,0,7,7],
	[3,3,3,0,0,0,0,0,0,7,7,7],
	[3,3,3,0,0,0,0,0,0,7,7,7],
	[3,3,3,0,0,0,0,0,0,7,7,7],
	[3,3,0,0,0,0,0,0,0,0,7,7],
	[3,0,0,0,0,0,0,0,0,0,0,7],
	[0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0],
],[
	[5,5,5,5,5,5,5,5,5,5,5,5],
	[5,5,5,5,5,5,5,5,5,5,5,5],
	[5,5,5,5,5,5,5,5,5,5,5,5],
	[5,5,5,5,5,5,5,5,5,5,5,5],
	[5,5,5,5,5,5,5,5,5,5,5,5],
	[5,5,5,5,5,5,5,5,5,5,5,5],
	[5,5,5,5,5,5,5,5,5,5,5,5],
	[0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0],
],[
	[D,D,D,D,D,D,D,D,D,D,D,D],
	[D,D,D,D,D,D,D,D,D,D,D,D],
	[D,D,D,D,D,D,D,D,D,D,D,D],
	[D,D,D,D,D,D,D,D,D,D,D,D],
	[D,D,D,D,D,D,D,D,D,D,D,D],
	[D,D,D,D,D,D,D,D,D,D,D,D],
	[5,6,6,5,5,5,5,5,5,4,4,5],
	[5,6,6,5,5,5,5,5,5,4,4,5],
	[5,6,6,5,5,5,5,5,5,4,4,5],
	[5,5,5,5,5,5,5,5,5,5,5,5],
	[0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0],
],[
	[5,5,5,5,5,5,5,5,5,5,5,5],
	[5,5,5,5,5,5,5,5,5,5,5,5],
	[5,5,5,5,5,5,5,5,5,5,5,5],
	[5,5,5,5,5,5,5,5,5,5,5,5],
	[5,5,5,5,5,5,5,5,5,5,5,5],
	[5,5,5,5,5,5,5,5,5,5,5,5],
	[5,5,5,5,5,5,5,5,5,5,5,5],
	[0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0],
]];

const rand12rwiggleanimtable = rotateAnimTable(rand12wiggleanimtable);  // int[][][]

// hull code:
// 0 = transparent
// 1 = any colour
// 2 = any colour
// 4 = always black

//////////////////////////////////////////////////////////////////////
// PixelArtGen class, the main portion of the code.

class PixelArtGen {
	constructor (
		xsize,  // int
		ysize,  // int
		filltable,  // int[][]
		animtable,  // int[][][]
		flipx,  // Boolean
		flipy,  // Boolean
		xshadingfac,  // int
		yshadingfac,  // int
		fill_prob,  // double
		fill_smoothing,  // double
		fill_smoothing_horiz_bias,  // double
		black_prob,  // double
		highlight_prob,  // double
		color_smoothing,  // double
		color_smoothing_horiz_bias  // double
	) {
		// Render parameters (instance variables).

		this.xsize = xsize;  // int, 16
		this.ysize = ysize;  // int, 16

		this.filltable = filltable;  // int[][]
		this.animtable = animtable;  // int[][][]

		this.flipx = flipx;  // Boolean, true
		this.flipy = flipy;  // Boolean, false

		this.shading = NONE;  // int

		// Note: xshadingfac + yshadingfac must be <= 2
		// 0=no shading 1=darken 2=darken more
		this.xshadingfac = xshadingfac;  // int, 0
		// 0=no shading 1=darken 2=darken more
		this.yshadingfac = yshadingfac;  // int, 0

		// Probability of filling pixel.
		this.fill_prob = fill_prob;  // double, 0.6
		// Probability that a pixel is filled the same as its neighbours.
		this.fill_smoothing = fill_smoothing;  // double, 0.2
		// Balance between taking horizontal versus vertical neighbours.
		this.fill_smoothing_horiz_bias = fill_smoothing_horiz_bias;  // double, 0.8

		// Probability of black pixel if enabled.
		this.black_prob = black_prob;  // double, 0.2
		// Probability of highlight pixel if enabled.
		this.highlight_prob = highlight_prob;  // double, 0.4
		// Probability that a colour (non-black) pixel is taken from neighbour.
		this.color_smoothing = color_smoothing;  // double, 0.7
		// Balance between taking horizontal versus vertical neighbours.
		this.color_smoothing_horiz_bias = color_smoothing_horiz_bias;  // double, 0.5

		if (this.shading == BEVEL) {
			this.xshadingfac = 0;
			this.yshadingfac = 0;
			// this.highlight_prob = 0;
		}
		if (this.shading == GOURAUD) {
			this.highlight_prob = 0;
		}
	}

	// Params: int
	// Returns: int[][]
	static createTransparentBitmap(xsize, ysize) {
		var pixels = [];  // int[xsize][ysize]
		for (var i = 0; i < xsize; i++) {
			pixels[i] = [];
			for (var j = 0; j < ysize; j++) {
				pixels[i][j] = transcolor;
			}
		}
		return pixels;
	}

	// Param: int[][]
	// Returns: nothing
	static addOutline(hull) {
		for (var x = 0; x < hull.length; x++) {
			for (var y = 0; y < hull[x].length; y++) {
				var neigh = false;  // Boolean
				neigh = neigh || x > 0                  && (hull[x - 1][y] & 3) == 2;
				neigh = neigh || x < hull.length - 1    && (hull[x + 1][y] & 3) == 2;
				neigh = neigh || y > 0                  && (hull[x][y - 1] & 3) == 2;
				neigh = neigh || y < hull[x].length - 1 && (hull[x][y + 1] & 3) == 2;
				if (neigh && hull[x][y] == 0) {
					hull[x][y] = 3;
				}
			}
		}
	}

	// Param: int[][]
	// Returns: nothing
	static addOutlineRGB(pixels) {
		for (var x = 0; x < pixels.length; x++) {
			for (var y = 0; y < pixels[x].length; y++) {
				var neigh = false;  // Boolean
				neigh = neigh || x > 0                    && pixels[x - 1][y] != transcolor && pixels[x - 1][y] != 0;
				neigh = neigh || x < pixels.length - 1    && pixels[x + 1][y] != transcolor && pixels[x + 1][y] != 0;
				neigh = neigh || y > 0                    && pixels[x][y - 1] != transcolor && pixels[x][y - 1] != 0;
				neigh = neigh || y < pixels[x].length - 1 && pixels[x][y + 1] != transcolor && pixels[x][y + 1] != 0;
				if (neigh && pixels[x][y] == transcolor) {
					pixels[x][y] = 0;
				}
				if (!neigh && pixels[x][y] == 0) {
					pixels[x][y] = transcolor;
				}
			}
		}
	}

	// Weight is probability of using sprite 1.
	// Params: Sprite, Sprite, double (from 0.0 to 1.0)
	// Returns: Sprite
	mergeSprites(spr1, spr2, weight) {
		var spr = new Sprite(spr1.coltable, spr1.gen,
			this.xsize, spr1.pixels.length, this.ysize);
		var xmax = this.flipx ? Math.floor(this.xsize / 2) : this.xsize;  // int
		var ymax = this.flipy ? Math.floor(this.ysize / 2) : this.ysize;  // int
		for (var y = 0; y < ymax; y++) {
			for (var x = 0; x < xmax; x++) {
				if (Math.random() < weight) {
					spr.colidx[x][y] = spr1.colidx[x][y];
				} else {
					spr.colidx[x][y] = spr2.colidx[x][y];
				}
			}
		}
		this.flipAndShade(spr);
		this.indexToRGB(spr);
		this.animate(spr);
		PixelArtGen.addOutlineRGB(spr.pixels);
		return spr;
	}

	// Param: int[]
	// Returns: Sprite
	createSprite(coltable) {
		var xmax = this.flipx ? Math.floor(this.xsize / 2) : this.xsize;  // int
		var ymax = this.flipy ? Math.floor(this.ysize / 2) : this.ysize;  // int
		var totalxsize = (!this.animtable) ? this.xsize : this.xsize * (this.animtable.length + 1);  // int
		var spr = new Sprite(coltable, this, this.xsize, totalxsize, this.ysize);
		// Decide which parts of hull to fill:
		//   * main fill type 1 -> 2
		//   * add outline
		for (var y = 0; y < ymax; y++) {
			for (var x = 0; x < xmax; x++) {
				var filltype = this.filltable[y][x];  // int
				var filltype_main = (filltype & 3);  // int
				var filltype_fill = ((filltype & 12) | 2);  // int
				if (filltype_main == 1) {
					// smooth = get colour from neighbouring pixel
					if (Math.random() < this.fill_smoothing) {
						var above = false;  // Boolean
						var left = false;  // Boolean
						if (x > 0) {
							left = (spr.hull[x - 1][y] & 3) == 2;
						}
						if (y > 0) {
							above = (spr.hull[x][y - 1] & 3) == 2;
						}
						var chosen = above || left;  // Boolean
						if (chosen) {
							spr.hull[x][y] = filltype_fill;
						}
					} else {
						// XXX: Probably a bug! The ">" should have been "<".
						if (Math.random() > this.fill_prob) {
							spr.hull[x][y] = filltype_fill;
						}
					}
				} else if (filltype_main == 2) {
					spr.hull[x][y] = filltype_fill;
				} else if (filltype_main == 3) {
					spr.hull[x][y] = 3;
				}
			}
		}
		// this.addOutline(spr.hull);
		// Colour fill type is handled by colorize.
		this.colorize(spr);
		this.flipAndShade(spr);
		if (this.shading == BEVEL  ) this.bevelShadeNew(spr);
		if (this.shading == GOURAUD) this.gouraudShade(spr);
		this.indexToRGB(spr);
		this.animate(spr);
		PixelArtGen.addOutlineRGB(spr.pixels);
		return spr;
	}

	// Param: Sprite
	// Returns: nothing
	colorize(spr) {
		var xmax = this.flipx ? Math.floor(this.xsize / 2) : this.xsize;  // int
		var ymax = this.flipy ? Math.floor(this.ysize / 2) : this.ysize;  // int
		var white = Math.floor(spr.coltable.length / 3) - 1;  // int
		for (var y = 0; y < ymax; y++) {
			for (var x = 0; x < xmax; x++) {
				var colnr = 0;  // int
				var filltype = spr.hull[x][y];  // int
				if ((filltype & 3) == 3) {  // Outline.
					colnr = 1;
				} else if ((filltype & 3) == 2) {  // Normal fill.
					if ((filltype & 4) == 4) {  // Black enabled.
						if (Math.random() < this.black_prob) {
							colnr = 1;  // Black.
						} else {
							if ((filltype & 8) == 8) {  // Highlight enabled.
								if (Math.random() < this.highlight_prob) {
									colnr = white;
								} else {
									// Any colour except black and highlight.
									colnr = Math.floor(2 + Math.random() * (Math.floor(spr.coltable.length / 3) - 3));
								}
							}
						}
					} else if ((filltype & 8) == 8) {  // Highlight enabled.
						if (Math.random() < this.highlight_prob) {
							colnr = white;
						} else {
							// Any colour except black and highlight.
							colnr = Math.floor(2 + Math.random() * (Math.floor(spr.coltable.length / 3) - 3));
						}
					} else { // Any colour except black and highlight.
						// NOTE: Previously highlight was also enabled but with normal probability.
						colnr = Math.floor(2 + Math.random() * (Math.floor(spr.coltable.length / 3) - 3));
					}
					// XXX: Both black and highlight not supported.
					// smooth = get colour from neighbouring pixel
					if (colnr > 1 && Math.random() < this.color_smoothing) {
						var above = 0;  // int
						var left = 0;  // int
						var chosen = 0;  // int
						if (x > 0) left  = Math.floor(spr.colidx[x - 1][y] / 3);
						if (y > 0) above = Math.floor(spr.colidx[x][y - 1] / 3);
						if (above == 0 && left == 0) {
							chosen = 0;
						} else if (above != 0 && left == 0) {
							chosen = above;
						} else if (above == 0 && left != 0) {
							chosen = left;
						} else if (above != 0 && left != 0) {
							if (Math.random() < this.color_smoothing_horiz_bias) {
								chosen = left;
							} else {
								chosen = above;
							}
						}
						if (chosen > 1) colnr = chosen;
					}
				}
				spr.colidx[x][y] = colnr * 3;
			}
		}
	}

	// flip according to symmetry axes and shade
	// Param: Sprite
	// Returns: nothing
	flipAndShade(spr) {
		for (var y = 0; y < this.ysize; y++) {
			for (var x = 0; x < this.xsize; x++) {
				var colnr = spr.colidx[x][y];  // int
				if (this.flipx && x < Math.floor(this.xsize / 2)) {
					spr.colidx[this.xsize - x - 1][y] = colnr + this.xshadingfac;
				}
				if (this.flipy && y < Math.floor(this.ysize / 2)) {
					spr.colidx[x][this.ysize - y - 1] = colnr + this.yshadingfac;
				}
				if (this.flipx && this.flipy && x < Math.floor(this.xsize / 2) && y < Math.floor(this.ysize / 2)) {
					spr.colidx[this.xsize - x - 1][this.ysize - y - 1] = colnr + this.xshadingfac + this.yshadingfac;
				}
			}
		}
		// if (this.shading == BEVEL) this.colorizeShadeAdd(spr);
	}

	// Param: Sprite
	// Returns: nothing
	indexToRGB(spr) {
		for (var x = 0; x < this.xsize; x++) {
			for (var y = 0; y < this.ysize; y++) {
				spr.pixels[x][y] = spr.coltable[spr.colidx[x][y]];
			}
		}
	}

	// Param: Sprite
	// Returns: nothing
	colorizeShadeAdd(spr) {
		// Shade given colours.
		for (var y = 0; y < this.ysize; y++) {
			for (var x = 0; x < this.xsize; x++) {
				var col = spr.colidx[x][y];  // int
				if (col != 0 && col != transcolor) {
					var tldist = this.findOutlineDist(spr, x, y, -1, -1, 5);  // int
					var brdist = this.findOutlineDist(spr, x, y, 1, 1, 5);  // int
					//console.log(tldist + ' ' + brdist);
					// 0=brightest .. 4=darkest
					// 0 / 2 / 4
					var bright = 4;  // int
					if (tldist < brdist * 2) bright = 3;
					if (tldist < brdist) bright = 2;
					if (tldist < Math.floor(brdist / 2)) bright = 1;
					if (tldist == 1 && brdist > 1) bright = 2;
					if (tldist == 2 && brdist > 2) bright = -1;
					if (tldist == 3 && brdist > 2) bright = 0;
					// Special cases: thin areas.
					if (tldist == 1 && brdist == 2) bright = 1;
					if (tldist == 2 && brdist == 1) bright = 3;
					// if (brdist == 1 && bright <= 2) bright += 2;
					// if (brdist == 2 && bright <= 3) bright += 1;
					// Any colour except black.
					// var colnr = Math.floor(2 + Math.random() * (Math.floor(spr.coltable.length / 3) - 2));
					if (bright >= 0) {
						var dither = ((bright & 1) == 1) && (((x + y) & 1) == 1);  // Boolean
						bright = Math.floor(bright / 2) + (dither ? 1 : 0);
						spr.colidx[x][y] += bright;
					} else {
						if (((x + y) & 1) == 1) spr.colidx[x][y] = 15;
					}
				}
			}
		}
	}

	// Params: spr is Sprite, all others are int
	// Returns: int
	findOutlineDist(spr, x, y, dx, dy, depth){
		/*
	    var xx = x;  // int
		var xdist = 0;  // int
		var ydist = 0;  // int
		while (true) {
			if (xx < 0 || xx >= this.xsize) break;
			var yy = y;  // int
			ydist = 0;
			while (true) {
				if (yy < 0 || yy >= this.ysize) break;
				if (pixels[xx][yy] == 0) return xdist + ydist;
				yy += dy;
				ydist++;
			}
			xx += dx;
			xdist++;
		}
		return xdist + ydist;
		*/
		if (x < 0 || x >= this.xsize
		||  y < 0 || y >= this.ysize) return 0;
		if (spr.pixels[x][y] >= 0 && spr.pixels[x][y] <= 5) return 0;
		if (depth <= 0) return 7;
		// console.log(x + ' ' + y);
		var xdist = this.findOutlineDist(spr, x + dx, y, dx, dy, depth - 1);  // int
		var ydist = this.findOutlineDist(spr, x, y + dy, dx, dy, depth - 1);  // int
		// return xdist < ydist ? xdist + 1 : ydist + 1;
		return Math.min(xdist, ydist) + 1;
	}

	// Param: Sprite
	// Returns: nothing
	bevelShadeNew(spr) {
		// Shade given colours.
		for (var y = 0; y < this.ysize; y++) {
			for (var x = 0; x < this.xsize; x++) {
				var idx = spr.colidx[x][y];  // int
				// if (idx >= 15) idx -= 3; // Remove highlights.
				if (idx >= 6) {
					var tldist = this.findOutlineDistNew(spr, x, y, -1, -1, 2);  // int
					var brdist = this.findOutlineDistNew(spr, x, y, 1, 1, 2);  // int
					// console.log(tldist + ' ' + brdist);
					// 0=darkest ... 4=brightest. Odd numbers will dither.
					var bright = 2;  // int
					// if (tldist == 2) bright = 4;
					if (tldist == 1) bright = 4;
					// if (brdist == 2) bright = 1;
					if (brdist == 1) bright = 0;
					// Special cases: thin areas.
					if (tldist == 1 && brdist == 1) bright = 2;
					var dither = ((bright & 1) == 1) && (((x + y) & 1) == 1);  // Boolean
					// 0, 1, or 2
					bright = Math.floor(bright / 2) + (dither ? 1 : 0);
					if (bright == 2) {
						spr.colidx[x][y] = 15; // Highlight.
					} else {
						spr.colidx[x][y] = 3 * Math.floor(idx / 3) + 2 - 2 * bright;
					}
				}
			}
		}
	}

	// Params: spr is Sprite, all others are int
	// Returns: int
	findOutlineDistNew(spr, x, y, dx, dy, depth) {
		if (x < 0 || x >= this.xsize
		||  y < 0 || y >= this.ysize) return 0;
		if (depth <= 0) return 0;
		if (spr.colidx[x][y] <= 5) return 0;
		var xdist = this.findOutlineDistNew(spr, x + dx, y, dx, dy, depth - 1);
		var ydist = this.findOutlineDistNew(spr, x, y + dy, dx, dy, depth - 1);
		// return (xdist < ydist) ? (xdist + 1) : (ydist + 1);
		return Math.min(xdist, ydist) + 1;
	}

	// Param: Sprite
	// Returns: nothing
	gouraudShade(spr) {
		var cenx = Math.floor(this.xsize / 4) + Math.floor(Math.random() * 2.999);  // int
		var ceny = Math.floor(this.ysize / 4) + Math.floor(Math.random() * 2.999);  // int
		var maxdist = this.xsize - cenx - 1;  // int
		var hlt_rx = Math.floor(Math.random() * 2.9999);  // int
		var hlt_ry = Math.floor(Math.random() * 2.9999);  // int
		var inner_r = 7 + Math.floor(Math.random() * 16);  // int
		var outer_r = 7 + Math.floor(Math.random() * 16);  // int
		for (var y = 0; y < this.ysize; y++) {
			var dy = Math.abs(y - ceny);  // int
			for (var x = 0; x < this.xsize; x++) {
				var dx = Math.abs(x - cenx);  // int
				var dd = dx * dx + dy * dy;  // int
				var idx = spr.colidx[x][y];  // int
				// if (idx == 15) idx -= 3;
				if (idx >= 6) {
					// 0=darkest .. 4=brightest. Odd numbers will dither.
					var bright = 2;  // int
					if (dx <= hlt_rx && dy <= hlt_ry) bright = 4;
					else if (dd <= inner_r) bright = 3;
					else if (dd >= maxdist * maxdist - outer_r) bright = 0;
					else if (dd >= maxdist * maxdist - outer_r - 13) bright = 1;
					var dither = ((bright & 1) == 1) && (((x + y) & 1) == 1);  // Boolean
					// 0, 1, or 2
					bright = Math.floor(bright / 2) + (dither ? 1 : 0);
					if (bright == 2) {
						spr.colidx[x][y] = 15; // highlight
					} else {
						spr.colidx[x][y] = 3 * Math.floor(idx / 3) + 2 - 2 * bright;
					}
					// spr.colidx[x][y] = 3 * Math.floor(idx / 3) + 2 - bright;
				}
			}
		}
	}

	// Param: Sprite
	// Returns: nothing
	animate(spr) {
		// Now, animate if applicable.
		if (!this.animtable) return;
		// d = distance travelled.
		// Pixels that travel the largest distance should overwrite other pixels.
		for (var d = 0; d <= 2; d++) {
			for (var y = 0; y < this.ysize; y++) {
				for (var x = 0; x < this.xsize; x++) {
					var col = spr.pixels[x][y];  // int
					if (col == transcolor) continue;
					for (var a = 0; a < this.animtable.length; a++) {
						var anim = this.animtable[a][y][x];  // int
						if (Math.floor((anim + 7) / 8) != d) continue;
						var dx = 0;  // int
						var dy = 0;  // int
						var mul = 1;  // int
						if (anim > 8) {
							mul = 2;
							anim -= 8;
						}
						if (anim == 8 || anim == 1 || anim == 2 ) dy = -1;
						if (anim == 2 || anim == 3 || anim == 4 ) dx = 1;
						if (anim == 4 || anim == 5 || anim == 6 ) dy = 1;
						if (anim == 6 || anim == 7 || anim == 8 ) dx = -1;
						dx *= mul;
						dy *= mul;
						// spr.pixels[(a + 1) * this.xsize + x][y] = transcolor;
						if (x + dx >= 0 && x + dx < this.xsize
						&&  y + dy >= 0 && y + dy < this.ysize) {
							spr.pixels[(a + 1) * this.xsize + x + dx][y + dy] = col;
						}
					}
				}
			}
		}
	}

	/*
	// code based on:
	//(c)2008 Adigun Azikiwe Polack.  All Rights Reserved.
	public static int [][] createXSymmetricOld(int xsize,int ysize) {
		int [] coltable = coltables[(int)(Math.random()*coltables.length)];
		int x=1,y=1;

		if (xsize > 16) xsize = 16;
		if (ysize > 17) ysize = 17;

		int [][] pixels = createTransparentBitmap(xsize+2,ysize+2);

		xsize /= 2;
		ysize += 11;

		x -= 1;
		y -= 2;

		int start = xsize + 2;
		for (int vert=0; vert<=ysize; vert++) {
			int outershell = 1;
			if (vert < (ysize / 2.1)) {
				start -= 1;
				if (start < 0) start = 0;
			} else {
				start += 2;
			}
			int colrandom = (int)(Math.random()* (coltable.length/2));
			for (int horiz=start; horiz<=xsize; horiz++) {
				if (outershell > 0) {
					if (  ( ( (int)(Math.random() * 70) + (1 + vert)) > 35 - (vert % 2) )
					||    ( vert == 0 && ( horiz == xsize || horiz == xsize - 1 ) ) ) {
						pixels[horiz + x][vert + y] = 0;
						pixels[((xsize - horiz) + (xsize + 1)) + x][vert + y] = 0;
						outershell = 0;
					}
				} else {
					if (Math.random() > 0.6)
						colrandom = (int)(Math.random()* (coltable.length/2));
					pixels[horiz + x][vert + y] = coltable[colrandom*2];
					pixels[((xsize - horiz) + (xsize + 1)) + x][vert + y]
						= coltable[colrandom*2 + 1];
				}
			}
		}
		return pixels;
	}
	*/
}

//////////////////////////////////////////////////////////////////////
// Shapes.

const shapes = [  // PixelArtGen[]
	// shad -> xshadingfac, yshadingfac
	// fb   -> fill_prob
	// fs   -> fill_smoothing
	// fsh  -> fill_smoothing_horiz_bias
	// bp   -> black_prob
	// hp   -> highlight_prob
	// cs   -> color_smoothing
	// csh  -> color_smoothing_horiz_bias
	//               w   h  filltable             animtable               flipx  flipy  shad  fp   fs    fsh  bp   hp   cs   csh
	new PixelArtGen( 6,  6, rand6filltable      , null                  , true , false, 0, 0, 0.6, 0.2 , 0.5, 0.3, 0.4, 0.3, 0.5),
	new PixelArtGen( 8,  8, rand8afilltable     , null                  , false, false, 0, 0, 0.6, 0.2 , 0.5, 0.3, 0.4, 0.3, 0.5),
	new PixelArtGen(10, 10, blob10filltable     , null                  , true , false, 0, 0, 0.5, 0.2 , 0.5, 0.3, 0.4, 0.3, 0.5),
	new PixelArtGen(10, 10, rand10filltable     , null                  , true , false, 0, 0, 0.5, 0.2 , 0.5, 0.3, 0.4, 0.3, 0.5),
	new PixelArtGen(10, 10, rand10filltable     , rand10walkanimtable   , true , false, 0, 0, 0.6, 0.2 , 0.5, 0.3, 0.4, 0.3, 0.5),
	new PixelArtGen(10, 10, rand10filltable     , rand10flyanimtable    , true , false, 0, 0, 0.6, 0.2 , 0.5, 0.3, 0.4, 0.3, 0.5),
	new PixelArtGen(12, 12, rand12filltable     , rand12walkanimtable   , true , false, 0, 0, 0.6, 0.2 , 0.5, 0.3, 0.4, 0.3, 0.5),
	new PixelArtGen(12, 12, rand12yfilltable    , rand12rwalkanimtable  , false, true , 0, 0, 0.6, 0.2 , 0.5, 0.3, 0.4, 0.3, 0.5),
	new PixelArtGen(12, 12, rand12filltable     , rand12flyanimtable    , true , false, 0, 0, 0.6, 0.2 , 0.5, 0.3, 0.4, 0.3, 0.5),
	new PixelArtGen(12, 12, rand12yfilltable    , rand12rflyanimtable   , false, true , 0, 0, 0.6, 0.2 , 0.5, 0.3, 0.4, 0.3, 0.5),
	new PixelArtGen(12, 12, rand12filltable     , rand12rcrawlanimtable , true , false, 0, 0, 0.6, 0.2 , 0.5, 0.3, 0.4, 0.3, 0.5),
	new PixelArtGen(12, 12, rand12filltable     , rand12crawlanimtable  , true , false, 0, 0, 0.6, 0.2 , 0.5, 0.3, 0.4, 0.3, 0.5),
	new PixelArtGen(12, 12, rand12yfilltable    , rand12crawlanimtable  , false, true , 0, 0, 0.6, 0.2 , 0.5, 0.3, 0.4, 0.3, 0.5),
	new PixelArtGen(12, 12, rand12dfilltable    , rand12crawlanimtable  , true , true , 0, 0, 0.6, 0.2 , 0.5, 0.3, 0.4, 0.3, 0.5),
	new PixelArtGen(12, 12, rand12filltable     , rand12bendanimtable   , true , false, 0, 0, 0.6, 0.2 , 0.5, 0.3, 0.4, 0.3, 0.5),
	new PixelArtGen(12, 12, rand12yfilltable    , rand12bendanimtable   , false, true , 0, 0, 0.6, 0.2 , 0.5, 0.3, 0.4, 0.3, 0.5),
	new PixelArtGen(12, 12, rand12dfilltable    , rand12bendanimtable   , true , true , 0, 0, 0.6, 0.2 , 0.5, 0.3, 0.4, 0.3, 0.5),
	new PixelArtGen(12, 12, rand12filltable     , rand12bubbleanimtable , true , false, 0, 0, 0.6, 0.2 , 0.5, 0.3, 0.4, 0.3, 0.5),
	new PixelArtGen(12, 12, rand12yfilltable    , rand12bubbleanimtable , false, true , 0, 0, 0.6, 0.2 , 0.5, 0.3, 0.4, 0.3, 0.5),
	new PixelArtGen(12, 12, rand12dfilltable    , rand12bubbleanimtable , true , true , 0, 0, 0.6, 0.2 , 0.5, 0.3, 0.4, 0.3, 0.5),
	new PixelArtGen(12, 12, rand12filltable     , rand12pokeanimtable   , true , false, 0, 0, 0.6, 0.2 , 0.5, 0.3, 0.4, 0.3, 0.5),
	new PixelArtGen(12, 12, rand12yfilltable    , rand12pokeanimtable   , false, true , 0, 0, 0.6, 0.2 , 0.5, 0.3, 0.4, 0.3, 0.5),
	new PixelArtGen(12, 12, rand12dfilltable    , rand12pokeanimtable   , true , true , 0, 0, 0.6, 0.2 , 0.5, 0.3, 0.4, 0.3, 0.5),
	new PixelArtGen(12, 12, rand12dfilltable    , rand12turnanimtable   , true , true , 0, 0, 0.6, 0.2 , 0.5, 0.3, 0.4, 0.3, 0.5),
	new PixelArtGen(12, 12, rand12filltable     , rand12wiggleanimtable , true , false, 0, 0, 0.6, 0.2 , 0.5, 0.3, 0.4, 0.3, 0.5),
	new PixelArtGen(12, 12, rand12yfilltable    , rand12rwiggleanimtable, false, true , 0, 0, 0.6, 0.2 , 0.5, 0.3, 0.4, 0.3, 0.5),
	new PixelArtGen(12, 12, rand12filltable     , rand12bounceanimtable , true , false, 0, 0, 0.6, 0.2 , 0.5, 0.3, 0.4, 0.3, 0.5),
	new PixelArtGen(12, 12, rand12dfilltable    , rand12bounceanimtable , true , true , 0, 0, 0.6, 0.2 , 0.5, 0.3, 0.4, 0.3, 0.5),
	new PixelArtGen(12, 12, rand12filltable     , rand12nullanimtable   , true , false, 0, 0, 0.6, 0.2 , 0.5, 0.3, 0.4, 0.3, 0.5),
	new PixelArtGen(12, 12, rand12dfilltable    , rand12nullanimtable   , true , true , 0, 0, 0.6, 0.2 , 0.5, 0.3, 0.4, 0.3, 0.5),
	new PixelArtGen(16, 16, rand16filltable     , null                  , true , false, 0, 0, 0.6, 0.2 , 0.5, 0.3, 0.4, 0.3, 0.5),
	new PixelArtGen(16, 16, shipfilltable       , null                  , true , false, 1, 1, 0.5, 0.6 , 0.5, 0.3, 0.4, 0.6, 0.5),
	new PixelArtGen(16, 16, ship2filltable      , birdanimtable         , true , false, 1, 1, 0.6, 0.5 , 0.5, 0.3, 0.4, 0.5, 0.5),
	new PixelArtGen(16, 16, bubblefilltable     , null                  , true , true , 1, 1, 0.5, 0.6 , 0.5, 0.3, 0.4, 0.6, 0.5),
	new PixelArtGen(18, 18, ufofilltable18      , null                  , true , true , 1, 1, 0.5, 0.75, 0.5, 0.3, 0.4, 0.8, 0.5),
	new PixelArtGen(18, 18, butterflyfilltable18, birdanimtable18       , true , false, 1, 1, 0.5, 0.7 , 0.5, 0.3, 0.4, 0.6, 0.5),
	new PixelArtGen(18, 18, manfilltable18      , mananimtable18        , true , false, 1, 1, 0.5, 0.6 , 0.5, 0.3, 0.4, 0.6, 0.5),
	new PixelArtGen(20, 12, fishfilltable       , null                  , false, true , 1, 1, 0.5, 0.2 , 0.8, 0.3, 0.4, 0.6, 0.8),
	// Tiles:
	new PixelArtGen(12, 12, tile12filltable     , rand12nullanimtable   , true , true , 0, 0, 0.6, 0.2 , 0.5, 0.3, 0.4, 0.2, 0.5),
	new PixelArtGen(12, 12, tile12filltable     , rand12nullanimtable   , true , true , 0, 0, 0.6, 0.2 , 0.5, 0.3, 0.4, 0.7, 0.5),
	new PixelArtGen(12, 12, tile12filltable     , rand12nullanimtable   , true , true , 1, 1, 0.6, 0.2 , 0.5, 0.3, 0.4, 0.2, 0.5),
	new PixelArtGen(12, 12, tile12filltable     , rand12nullanimtable   , true , true , 1, 1, 0.6, 0.2 , 0.5, 0.3, 0.4, 0.7, 0.5),
	new PixelArtGen(12, 12, tile12filltable     , rand12nullanimtable   , true , true , 0, 2, 0.6, 0.2 , 0.5, 0.3, 0.4, 0.2, 0.5),
	new PixelArtGen(12, 12, tile12filltable     , rand12nullanimtable   , true , true , 0, 2, 0.6, 0.2 , 0.5, 0.3, 0.4, 0.7, 0.5),
	new PixelArtGen(12, 12, tileplat12filltable , rand12nullanimtable   , true , true , 0, 0, 0.6, 0.2 , 0.5, 0.3, 0.4, 0.2, 0.5),
	new PixelArtGen(12, 12, tileplat12filltable , rand12nullanimtable   , true , true , 0, 0, 0.6, 0.2 , 0.5, 0.3, 0.4, 0.7, 0.5),
	new PixelArtGen(12, 12, tileplat12filltable , rand12nullanimtable   , true , true , 1, 1, 0.6, 0.2 , 0.5, 0.3, 0.4, 0.2, 0.5),
	new PixelArtGen(12, 12, tileplat12filltable , rand12nullanimtable   , true , true , 1, 1, 0.6, 0.2 , 0.5, 0.3, 0.4, 0.7, 0.5),
	new PixelArtGen(12, 12, tileplat12filltable , rand12nullanimtable   , true , true , 0, 2, 0.6, 0.2 , 0.5, 0.3, 0.4, 0.2, 0.5),
	new PixelArtGen(12, 12, tileplat12filltable , rand12nullanimtable   , true , true , 0, 2, 0.6, 0.2 , 0.5, 0.3, 0.4, 0.7, 0.5),
	new PixelArtGen(16, 16, tilefilltable       , null                  , true , true , 1, 1, 0.5, 0.4 , 0.5, 0.3, 0.4, 0.8, 0.5),
];

//////////////////////////////////////////////////////////////////////
// Sprite class.

class Sprite {
	constructor (
		coltable,  // int[]
		gen,  // PixelArtGen
		xsize,  // int
		totalxsize,  // int
		ysize  // int
	) {
		// Render parameters as part of instance.
		this.coltable = coltable;
		this.gen = gen;

		// Output
		// xsize *ysize fill types
		this.hull = [];  // int[xsize][ysize]
		// xsize*ysize color indexes
		this.colidx = [];  // int[xsize][ysize]
		// xsize*ysize shade levels (0..2)
		// var shades;  // int[][]
		// xsize*animsize*ysize colours
		this.pixels = PixelArtGen.createTransparentBitmap(totalxsize, ysize);  // int[][]

		// Initializing 2D array size.
		for (var i = 0; i < xsize; i++) {
			this.hull[i] = [];
			this.hull[i][ysize - 1] = 0;
			this.colidx[i] = [];
			this.colidx[i][ysize - 1] = 0;
		}
	}

	get width() {
		return this.pixels.length;
	}

	get height() {
		if (this.pixels.length == 0) return 0;
		return this.pixels[0].length;
	}

	getNrFrames() {
		if (!this.gen.animtable) return 1;
		return this.gen.animtable.length + 1;
	}

	// Resets the pixel data to transparent.
	// Retuns: nothing
	clear() {
		for (var i = 0; i < this.pixels.length; i++) {
			for (var j = 0; j < this.pixels[i].length; j++) {
				this.pixels[i][j] = transcolor;
			}
		}
	}
}

//////////////////////////////////////////////////////////////////////
// ColorSchemeGen.

// https://lotsacode.wordpress.com/2010/03/11/hsvtorgb-and-rgbtohsv-in-c/
// h,s,v between 0 and 1.
// XXX this algorithm has h=0-blue, h=0.3333333-green, h=0.5-yellow
//
// Params: h,s,v are double
// Returns: int
function HSVtoRGB(h, s, v) {
	var r = 0.0;  // double
	var g = 0.0;  // double
	var b = 0.0;  // double
	if (s == 0) {
		r = v;
		g = v;
		b = v;
	} else {
		var varH = h * 6;  // double
		var varI = Math.floor(varH);  // int
		var var1 = v * (1 - s);  // double
		var var2 = v * (1 - (s * (varH - varI)));  // double
		var var3 = v * (1 - (s * (1 - (varH - varI))));  // double
		switch (varI) {
			case 0:
				r = v;
				g = var3;
				b = var1;
				break;
			case 1:
				r = var2;
				g = v;
				b = var1;
				break;
			case 2:
				r = var1;
				g = v;
				b = var3;
				break;
			case 3:
				r = var1;
				g = var2;
				b = v;
				break;
			case 4:
				r = var3;
				g = var1;
				b = v;
				break;
			case 5:
				r = v;
				g = var1;
				b = var2;
		}
	}
	return (
		(Math.floor(r*255.49)) +
		(Math.floor(g*255.49)<<8) +
		(Math.floor(b*255.49)<<16)
	);
}


// generate a colors+3 x shades array of colours.
// 0th subarray is transparent
// 1st subarray is black
// 2nd ... n+1th subarray are the colours
// n+2th subarray is white
// each subarray is shades long
//
// Params: int
// Returns: int[]
function genSpriteColorScheme(transcol, black, colors, shades) {
	var ret = [];  // int[]
	ret[(colors + 3) * shades - 1] = 0;  // Initializing the array size.
	var darken = (0.3 + 0.2 * Math.random()) / (shades - 1);  // double
	for (var i = 0; i < shades; i++) {
		ret[i] = transcol;
		ret[i + shades] = black;
		ret[i + shades * (colors + 2)] = HSVtoRGB(0, 0, 1.0 - darken * i);
	}
	var hshift = Math.random() > 0.5 ? Math.random() : 0.2 * Math.random();  // double
	var svshift = 0.5 * Math.random();  // double
	var s = 0.5 + 0.5 * Math.random();  // double
	var h = Math.random();  // double
	svshift /= (shades - 1); // Normalise over shades
	var shadeshift = (0.4 + 0.3 * Math.random()) / (shades - 1);  // double
	var v = 1.0;  // double
	for (var c = 2; c < colors + 2; c++) {
		var ssh = s;  // double
		var vsh = v;  // double
		for (var i = 0; i < shades; i++) {
			ret[i + shades * c] = HSVtoRGB(h, ssh, vsh);
			if (ssh < 1) {
				ssh += shadeshift;
				if (ssh > 1) {
					vsh -= ssh - 1;
					ssh = 1;
				}
			} else {
				vsh -= svshift;
			}
		}
		h += hshift;
		if (h > 1) h -= 1;
		if (s < 1) {
			s += svshift;
			if (s > 1) {
				v -= s - 1;
				s = 1;
			}
		} else {
			v -= svshift;
		}
	}
	return ret;
}

//////////////////////////////////////////////////////////////////////
// Exporting to JavaScript canvas/ImageData.

// Params: Sprite, CanvasRenderingContext2D
// Returns: ImageData
function createImageDataFromSprite(spr, ctx) {
	var width = spr.width;
	var height = spr.height;
	var img = ctx.createImageData(width, height);
	drawSpriteIntoImageData(spr, img);
	return img;
}

// Params: Sprite, ImageData
// Returns: nothing
function drawSpriteIntoImageData(spr, img) {
	var width = spr.width;
	var height = spr.height;
	for (var y = 0; y < height; y++) {
		for (var x = 0; x < width; x++) {
			var pixel = spr.pixels[x][y];
			var r = (pixel >> 16) & 255;
			var g = (pixel >> 8) & 255;
			var b = pixel & 255;
			var a = pixel == transcolor ? 0 : 255;
			img.data[(y * width + x) * 4 + 0] = r;
			img.data[(y * width + x) * 4 + 1] = g;
			img.data[(y * width + x) * 4 + 2] = b;
			img.data[(y * width + x) * 4 + 3] = a;
		}
	}
}
